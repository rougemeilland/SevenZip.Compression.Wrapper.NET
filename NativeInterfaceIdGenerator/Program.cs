using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;

namespace NativeInterfaceIdGenerator
{
    internal static partial class Program
    {
        private const String _sourceDataabseFileName = "SevenZipInterfaces.json";
        private const String _nativeCodeProjectName = "Palmtree.SevenZip.Compression.Wrapper.NET.Native";

        private static readonly JsonSerializerOptions _jsonSerializerOptions = new() { PropertyNameCaseInsensitive = true };

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE0060:未使用のパラメーターを削除します", Justification = "<保留中>")]
        private static void Main(String[] args)
        {
            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);

            var solutionPath = GetSolutionPath();
            if (solutionPath is not null)
            {
                var sevenZipInterfacesModel =
                    JsonSerializer.Deserialize<SevenZipInterfacesModel>(File.ReadAllText(_sourceDataabseFileName), _jsonSerializerOptions)
                    ?? throw new Exception();

                foreach (var sevenZipInterface in sevenZipInterfacesModel.Interfaces)
                {
                    foreach (var member in sevenZipInterface.Members)
                    {
                        if (member.Parameters7z.Length > 0)
                        {
                            if (member.ParametersCpp.Length <= 0)
                                member.ParametersCpp = member.Parameters7z;
                        }

                        if (member.ParametersCpp.Length > 0)
                        {
                            if (member.ParametersCSharp.Length <= 0)
                                member.ParametersCSharp = member.ParametersCpp;
                        }
                    }
                }

                RenderSevenZipNativeWrapperUnmanagedH(solutionPath, sevenZipInterfacesModel);
                RenderSevenZipNativeWrapperUnmanagedCpp(solutionPath, sevenZipInterfacesModel);
                RenderSevenZipNativeWrapperUnmanagedCs(solutionPath, sevenZipInterfacesModel);
                CopyVersionResource(solutionPath);
            }

            Console.WriteLine();
            Console.WriteLine("Complete");
            Console.Beep();
            _ = Console.ReadLine();
        }

        private static String? GetSolutionPath()
        {
            var solutionPath = typeof(Program).Assembly.Location;
            while (solutionPath is not null && !String.Equals(Path.GetFileName(solutionPath), "bin", StringComparison.OrdinalIgnoreCase))
                solutionPath = Path.GetDirectoryName(solutionPath);
            solutionPath = Path.GetDirectoryName(solutionPath);
            if (solutionPath is null)
                return null;
            if (!String.Equals(Path.GetFileName(solutionPath), "NativeInterfaceIdGenerator", StringComparison.OrdinalIgnoreCase))
                return null;
            return Path.GetDirectoryName(solutionPath);
        }

        private static void RenderSevenZipNativeWrapperUnmanagedH(String solutionPath, SevenZipInterfacesModel sevenZipInterfacesModel)
        {
            var destinationFilePath = Path.Combine(solutionPath, _nativeCodeProjectName, "SevenZipInterface_AutoGenerated.h");
            var destinationFileDirectory = Path.GetDirectoryName(destinationFilePath);
            if (destinationFileDirectory is not null)
            {
                _ = Directory.CreateDirectory(destinationFileDirectory);
                if (File.Exists(destinationFilePath))
                    File.SetAttributes(destinationFilePath, File.GetAttributes(destinationFilePath) & ~FileAttributes.ReadOnly);
                File.SetAttributes(destinationFilePath, File.GetAttributes(destinationFilePath) & ~FileAttributes.ReadOnly);
                using (var writer = new StreamWriter(destinationFilePath))
                {
                    writer.WriteLine("#pragma once");
                    writer.WriteLine();
                    writer.WriteLine("// This file is automatically generated. Do not rewrite manually.");
                    writer.WriteLine();
                    writer.WriteLine("#include \"Platform.h\"");
                    writer.WriteLine();
                    writer.WriteLine("struct ICompressProgressInfo;");
                    foreach (var sevenZipInterface in sevenZipInterfacesModel.Interfaces.Where(sevenZipInterface => !String.Equals(sevenZipInterface.InterfaceName, "IUnknown", StringComparison.Ordinal)))
                    {
                        writer.WriteLine();
                        if (!sevenZipInterface.Implemented)
                            writer.WriteLine("#if false // This interface is not supported by the wrapper.");
                        var interfaceId = Guid.Parse(sevenZipInterface.InterfaceId);
                        var interfaceIdBytes = interfaceId.ToByteArray();
                        writer.WriteLine($"extern \"C\" const GUID IID_{sevenZipInterface.InterfaceName};");
                        writer.WriteLine($"struct {sevenZipInterface.InterfaceName}");
                        writer.WriteLine($"    : public {sevenZipInterface.BaseInerfaceName}");
                        writer.WriteLine("{");
                        //writer.WriteLine($"    virtual ~{sevenZipInterface.InterfaceName}();");
                        foreach (var sevenZipInterfaceMember in sevenZipInterface.Members)
                        {
                            var parameters = String.Join(", ", sevenZipInterfaceMember.Parameters7z.Select(parameter => $"{parameter.ParameterType} {parameter.ParameterName}"));
                            writer.WriteLine($"    virtual {sevenZipInterfaceMember.ReturnValueType} STDMETHODCALLTYPE {sevenZipInterfaceMember.MemberName}({parameters}) = 0;");
                        }

                        writer.WriteLine("};");
                        if (!sevenZipInterface.Implemented)
                            writer.WriteLine("#endif // This interface is not supported by the wrapper.");
                    }

                    writer.WriteLine();
                    foreach (var sevenZipInterface in sevenZipInterfacesModel.Interfaces)
                    {
                        if (sevenZipInterface.Implemented && sevenZipInterface.ProvidedOutward)
                        {
                            foreach (var sevenZipInterfaceMember in sevenZipInterface.Members)
                            {
                                if (sevenZipInterfaceMember.IsCustomizedParameter)
                                {
                                    var parameters = String.Join(", ", sevenZipInterfaceMember.ParametersCpp.Select(parameter => $"{parameter.ParameterType} {parameter.ParameterName}").Prepend($"{sevenZipInterface.InterfaceName}*  ifp"));
                                    writer.WriteLine($"extern {sevenZipInterfaceMember.ReturnValueType} STDMETHODCALLTYPE Customized_{sevenZipInterface.InterfaceName}__{sevenZipInterfaceMember.MemberName}({parameters});");
                                }
                            }
                        }
                    }
                }

                //File.SetLastWriteTimeUtc(destinationFilePath, sourceDatabaseTimeStamp);
                File.SetAttributes(destinationFilePath, File.GetAttributes(destinationFilePath) | FileAttributes.ReadOnly);
            }
        }

        private static void RenderSevenZipNativeWrapperUnmanagedCpp(String solutionPath, SevenZipInterfacesModel sevenZipInterfacesModel)
        {
            var destinationFilePath = Path.Combine(solutionPath, _nativeCodeProjectName, "SevenZipInterface_AutoGenerated.cpp");
            var destinationFileDirectory = Path.GetDirectoryName(destinationFilePath);
            if (destinationFileDirectory is not null)
            {
                _ = Directory.CreateDirectory(destinationFileDirectory);
                if (File.Exists(destinationFilePath))
                    File.SetAttributes(destinationFilePath, File.GetAttributes(destinationFilePath) & ~FileAttributes.ReadOnly);
                File.SetAttributes(destinationFilePath, File.GetAttributes(destinationFilePath) & ~FileAttributes.ReadOnly);
                using (var nativeInterfaceCppWriter = new StreamWriter(destinationFilePath))
                {
                    nativeInterfaceCppWriter.WriteLine("// This file is automatically generated. Do not rewrite manually.");
                    nativeInterfaceCppWriter.WriteLine();
                    nativeInterfaceCppWriter.WriteLine("#include \"SevenZipInterface.h\"");
                    nativeInterfaceCppWriter.WriteLine();
                    foreach (var sevenZipInterface in sevenZipInterfacesModel.Interfaces.Where(sevenZipInterface => !String.Equals(sevenZipInterface.InterfaceName, "IUnknown", StringComparison.Ordinal)))
                    {
                        if (!sevenZipInterface.Implemented)
                            nativeInterfaceCppWriter.WriteLine("#if false // This interface is not supported by the wrapper.");
                        var interfaceId = Guid.Parse(sevenZipInterface.InterfaceId);
                        var interfaceIdBytes = interfaceId.ToByteArray();
                        nativeInterfaceCppWriter.WriteLine($"extern \"C\" const GUID IID_{sevenZipInterface.InterfaceName} = {{ 0x{interfaceIdBytes[3]:x2}{interfaceIdBytes[2]:x2}{interfaceIdBytes[1]:x2}{interfaceIdBytes[0]:x2}, 0x{interfaceIdBytes[5]:x2}{interfaceIdBytes[4]:x2}, 0x{interfaceIdBytes[7]:x2}{interfaceIdBytes[6]:x2}, {{ 0x{interfaceIdBytes[9]:x2}, 0x{interfaceIdBytes[8]:x2}, 0x{interfaceIdBytes[10]:x2}, 0x{interfaceIdBytes[11]:x2}, 0x{interfaceIdBytes[12]:x2}, 0x{interfaceIdBytes[13]:x2}, 0x{interfaceIdBytes[14]:x2}, 0x{interfaceIdBytes[15]:x2} }} }};");
                        //nativeInterfaceCppWriter.WriteLine($"{sevenZipInterface.InterfaceName}::~{sevenZipInterface.InterfaceName}() {{ }}");
                        if (!sevenZipInterface.Implemented)
                            nativeInterfaceCppWriter.WriteLine("#endif // This interface is not supported by the wrapper.");
                    }

                    nativeInterfaceCppWriter.WriteLine();
                    nativeInterfaceCppWriter.WriteLine("extern \"C\"");
                    nativeInterfaceCppWriter.WriteLine("{");
                    foreach (var sevenZipInterface in sevenZipInterfacesModel.Interfaces)
                    {
                        if (sevenZipInterface.ProvidedOutward)
                        {
                            if (!sevenZipInterface.Implemented)
                                nativeInterfaceCppWriter.WriteLine("#if false // This interface is not supported by the wrapper.");

                            foreach (var sevenZipInterfaceMember in sevenZipInterface.Members)
                            {
                                var parameters = String.Join(", ", sevenZipInterfaceMember.ParametersCpp.Select(parameter => $"{parameter.ParameterType} {parameter.ParameterName}").Prepend($"{sevenZipInterface.InterfaceName}* ifp"));
                                nativeInterfaceCppWriter.WriteLine($"    __DEFINE_PUBLIC_FUNC({sevenZipInterfaceMember.ReturnValueType}, {sevenZipInterface.InterfaceName}, {sevenZipInterfaceMember.MemberName})({parameters})");
                                nativeInterfaceCppWriter.WriteLine("    {");
                                if (sevenZipInterfaceMember.IsCustomizedParameter)
                                {
                                    var values = String.Join(", ", sevenZipInterfaceMember.ParametersCpp.Select(parameter => parameter.ParameterName).Prepend("ifp"));
                                    if (String.Equals(sevenZipInterfaceMember.ReturnValueType, "void", StringComparison.Ordinal))
                                        nativeInterfaceCppWriter.WriteLine($"        Customized_{sevenZipInterface.InterfaceName}__{sevenZipInterfaceMember.MemberName}({values});");
                                    else
                                        nativeInterfaceCppWriter.WriteLine($"        return Customized_{sevenZipInterface.InterfaceName}__{sevenZipInterfaceMember.MemberName}({values});");
                                    nativeInterfaceCppWriter.WriteLine("    }");
                                }
                                else
                                {
                                    var values = String.Join(", ", sevenZipInterfaceMember.Parameters7z.Select(parameter => parameter.ParameterName));
                                    if (String.Equals(sevenZipInterfaceMember.ReturnValueType, "void", StringComparison.Ordinal))
                                        nativeInterfaceCppWriter.WriteLine($"        ifp->{sevenZipInterfaceMember.MemberName}({values});");
                                    else
                                        nativeInterfaceCppWriter.WriteLine($"        return ifp->{sevenZipInterfaceMember.MemberName}({values});");
                                    nativeInterfaceCppWriter.WriteLine("    }");
                                }

                                nativeInterfaceCppWriter.WriteLine();
                            }

                            if (!sevenZipInterface.Implemented)
                                nativeInterfaceCppWriter.WriteLine("#endif // This interface is not supported by the wrapper.");
                        }
                    }

                    nativeInterfaceCppWriter.WriteLine("}");
                }

                //File.SetLastWriteTimeUtc(destinationFilePath, sourceDatabaseTimeStamp);
                File.SetAttributes(destinationFilePath, File.GetAttributes(destinationFilePath) | FileAttributes.ReadOnly);
            }
        }

        private static void RenderSevenZipNativeWrapperUnmanagedCs(String solutionPath, SevenZipInterfacesModel sevenZipInterfacesModel)
        {
            {
                var destinationFilePath = Path.Combine(solutionPath, $"Palmtree.SevenZip.Compression.Wrapper.NET", "NativeInterfaces", $"NativeInterOp.AutoGenerated.cs");
                var destinationFileDirectory = Path.GetDirectoryName(destinationFilePath);
                if (destinationFileDirectory is not null)
                {
                    _ = Directory.CreateDirectory(destinationFileDirectory);
                    if (File.Exists(destinationFilePath))
                        File.SetAttributes(destinationFilePath, File.GetAttributes(destinationFilePath) & ~FileAttributes.ReadOnly);
                    using var nativeInterfaceCsWriter = new StreamWriter(destinationFilePath);
                    nativeInterfaceCsWriter.WriteLine("// This file is automatically generated. Do not rewrite manually.");
                    nativeInterfaceCsWriter.WriteLine();
                    nativeInterfaceCsWriter.WriteLine("using System;");
                    nativeInterfaceCsWriter.WriteLine("using System.Runtime.CompilerServices;");
                    nativeInterfaceCsWriter.WriteLine("using System.Runtime.InteropServices;");
                    nativeInterfaceCsWriter.WriteLine();
                    nativeInterfaceCsWriter.WriteLine($"namespace SevenZip.Compression.NativeInterfaces");
                    nativeInterfaceCsWriter.WriteLine("{");
                    nativeInterfaceCsWriter.WriteLine("    internal sealed partial class NativeInterOp");
                    nativeInterfaceCsWriter.WriteLine("    {");
                    var firstInterface = true;
                    foreach (var sevenZipInterface in sevenZipInterfacesModel.Interfaces)
                    {
                        if (sevenZipInterface.ProvidedOutward)
                        {
                            if (!firstInterface)
                                nativeInterfaceCsWriter.WriteLine();
                            nativeInterfaceCsWriter.WriteLine($"        #region {sevenZipInterface.InterfaceName}");
                            nativeInterfaceCsWriter.WriteLine();
                            if (!sevenZipInterface.Implemented)
                                nativeInterfaceCsWriter.WriteLine($"#if false // {sevenZipInterface.InterfaceName} interface is not supported by the wrapper.");
                            var firstInterfaceMember = true;
                            foreach (var sevenZipInterfaceMember in sevenZipInterface.Members)
                            {
                                if (!firstInterfaceMember)
                                    nativeInterfaceCsWriter.WriteLine();
                                nativeInterfaceCsWriter.WriteLine($"        #region {sevenZipInterface.InterfaceName}_{sevenZipInterfaceMember.MemberName}");
                                nativeInterfaceCsWriter.WriteLine();
                                var parametersSource = sevenZipInterfaceMember.ParametersCSharp;
                                var isSafe = parametersSource.All(parameter => IsCSharpSafeType(parameter.ParameterType));
                                if (isSafe && !String.IsNullOrEmpty(sevenZipInterfaceMember.MemberComment))
                                {
                                    nativeInterfaceCsWriter.WriteLine("        /// <summary>");
                                    nativeInterfaceCsWriter.WriteLine($"        /// {sevenZipInterfaceMember.MemberComment}");
                                    nativeInterfaceCsWriter.WriteLine("        /// </summary>");
                                    nativeInterfaceCsWriter.WriteLine($"        /// <param name=\"ifp\">Set a pointer to the {sevenZipInterface.InterfaceName} interface object.</param>");
                                    foreach (var parameter in sevenZipInterfaceMember.ParametersCSharp)
                                        nativeInterfaceCsWriter.WriteLine($"        /// <param name=\"{parameter.ParameterName}\">{parameter.ParameterComment}</param>");
                                    var returnValueType = MapTypeFromUnmanageToManage(sevenZipInterfaceMember.ReturnValueType);
                                    if (!String.Equals(returnValueType, "void", StringComparison.Ordinal))
                                        nativeInterfaceCsWriter.WriteLine($"        /// <returns>{sevenZipInterfaceMember.ReturnValueComment}</returns>");
                                    if (!String.IsNullOrEmpty(sevenZipInterfaceMember.MemberAdditionalComment))
                                        nativeInterfaceCsWriter.WriteLine($"        /// <remarks>{sevenZipInterfaceMember.MemberAdditionalComment}</remarks>");
                                }

                                var parameterDeclaration =
                                    String.Join(
                                        ", ",
                                        parametersSource
                                            .Select(parameter => $"{MapTypeFromUnmanageToManage(parameter.ParameterType)} {parameter.ParameterName}")
                                            .Prepend($"IntPtr ifp"));
                                var parameters =
                                    String.Join(", ", parametersSource
                                    .Select(parameter =>
                                    {
                                        if (parameter.ParameterType.StartsWith("out ", StringComparison.Ordinal))
                                            return $"out {parameter.ParameterName}";
                                        if (parameter.ParameterType.StartsWith("ref ", StringComparison.Ordinal))
                                            return $"ref {parameter.ParameterName}";
                                        else
                                            return parameter.ParameterName;
                                    })
                                    .Prepend("ifp"));
                                nativeInterfaceCsWriter.WriteLine("        [MethodImpl(MethodImplOptions.AggressiveInlining)]");
                                nativeInterfaceCsWriter.WriteLine($"        {(isSafe ? "public" : "private")} static {(isSafe ? "" : "unsafe ")}{MapTypeFromUnmanageToManage(sevenZipInterfaceMember.ReturnValueType)} {sevenZipInterface.InterfaceName}__{sevenZipInterfaceMember.MemberName}({parameterDeclaration})");
                                nativeInterfaceCsWriter.WriteLine("        {");
                                var firstArchitecture = true;
                                foreach (var (operatingSystemChecker, operatingSystem) in
                                    new[]
                                    {
                                    ("IsWindows", "win"),
                                    ("IsLinux", "linux"),
                                    ("IsMacOS", "osx"),
                                    })
                                {
                                    nativeInterfaceCsWriter.WriteLine($"            {(firstArchitecture ? "" : "else ")}if (OperatingSystem.{operatingSystemChecker}())");
                                    nativeInterfaceCsWriter.WriteLine($"                return {sevenZipInterface.InterfaceName}__{sevenZipInterfaceMember.MemberName}_{operatingSystem}({parameters});");
                                    firstArchitecture = false;
                                }

                                nativeInterfaceCsWriter.WriteLine("            else");
                                nativeInterfaceCsWriter.WriteLine("                throw new NotSupportedException(\"Running on this operating system is not supported.\");");
                                nativeInterfaceCsWriter.WriteLine("        }");
                                nativeInterfaceCsWriter.WriteLine();
                                var firstAPI = true;
                                foreach (var os in new[] { "win", "linux", "osx" })
                                {
                                    if (!firstAPI)
                                        nativeInterfaceCsWriter.WriteLine();
                                    nativeInterfaceCsWriter.WriteLine($"        [LibraryImport(_NATIVE_METHOD_DLL_NAME, EntryPoint = \"EXPORTED_{sevenZipInterface.InterfaceName}__{sevenZipInterfaceMember.MemberName}\")]");
                                    nativeInterfaceCsWriter.WriteLine($"        [UnmanagedCallConv(CallConvs = new[] {{typeof({(os == "win" ? "CallConvStdcall" : "CallConvCdecl")})}})]");
                                    nativeInterfaceCsWriter.WriteLine($"        private static {(isSafe ? "" : "unsafe ")}partial {MapTypeFromUnmanageToManage(sevenZipInterfaceMember.ReturnValueType)} {sevenZipInterface.InterfaceName}__{sevenZipInterfaceMember.MemberName}_{os}({parameterDeclaration});");
                                    firstAPI = false;
                                }

                                nativeInterfaceCsWriter.WriteLine();
                                nativeInterfaceCsWriter.WriteLine($"        #endregion //{sevenZipInterface.InterfaceName}_{sevenZipInterfaceMember.MemberName}");
                                firstInterfaceMember = false;
                            }

                            if (!sevenZipInterface.Implemented)
                                nativeInterfaceCsWriter.WriteLine($"#endif // {sevenZipInterface.InterfaceName} interface is not supported by the wrapper.");
                            nativeInterfaceCsWriter.WriteLine();
                            nativeInterfaceCsWriter.WriteLine($"        #endregion // {sevenZipInterface.InterfaceName}");
                            firstInterface = false;
                        }
                    }

                    nativeInterfaceCsWriter.WriteLine("    }");
                    nativeInterfaceCsWriter.WriteLine("}");

                    //File.SetLastWriteTimeUtc(destinationFilePath, sourceDatabaseTimeStamp);
                    File.SetAttributes(destinationFilePath, File.GetAttributes(destinationFilePath) | FileAttributes.ReadOnly);
                }
            }

            {

                var destinationFileDirectory = Path.Combine(solutionPath, $"Palmtree.SevenZip.Compression.Wrapper.NET", "NativeInterfaces");
                if (destinationFileDirectory is not null)
                {
                    _ = Directory.CreateDirectory(destinationFileDirectory);
                    foreach (var sevenZipInterface in sevenZipInterfacesModel.Interfaces)
                    {
                        if (sevenZipInterface.Implemented && sevenZipInterface.ProvidedOutward && sevenZipInterface.InterfaceName != "IUnknown")
                        {
                            var className = sevenZipInterface.InterfaceName[1..];
                            var destinationFilePath = Path.Combine(destinationFileDirectory, $"{className}.AutoGenerated.cs");
                            if (File.Exists(destinationFilePath))
                                File.SetAttributes(destinationFilePath, File.GetAttributes(destinationFilePath) & ~FileAttributes.ReadOnly);
                            using (var nativeInterfaceCsWriter = new StreamWriter(destinationFilePath))
                            {
                                nativeInterfaceCsWriter.WriteLine("// This file is automatically generated. Do not rewrite manually.");
                                nativeInterfaceCsWriter.WriteLine();
                                nativeInterfaceCsWriter.WriteLine("using System;");
                                nativeInterfaceCsWriter.WriteLine("using System.Runtime.InteropServices;");
                                nativeInterfaceCsWriter.WriteLine();
                                nativeInterfaceCsWriter.WriteLine($"namespace SevenZip.Compression.NativeInterfaces");
                                nativeInterfaceCsWriter.WriteLine("{");
                                nativeInterfaceCsWriter.WriteLine($"    [Guid(\"{sevenZipInterface.InterfaceId}\")]");
                                nativeInterfaceCsWriter.WriteLine($"    internal sealed partial class {className}");
                                nativeInterfaceCsWriter.WriteLine("         : Unknown");
                                nativeInterfaceCsWriter.WriteLine("    {");
                                nativeInterfaceCsWriter.WriteLine($"        private {className}(IntPtr nativeInterfaceObject)");
                                nativeInterfaceCsWriter.WriteLine("            : base(nativeInterfaceObject)");
                                nativeInterfaceCsWriter.WriteLine("        {");
                                nativeInterfaceCsWriter.WriteLine("        }");
                                nativeInterfaceCsWriter.WriteLine("    }");
                                nativeInterfaceCsWriter.WriteLine("}");
                            }

                            File.SetAttributes(destinationFilePath, File.GetAttributes(destinationFilePath) | FileAttributes.ReadOnly);
                        }
                    }
                }
            }

            {
                var destinationFilePath = Path.Combine(solutionPath, $"Palmtree.SevenZip.Compression.Wrapper.NET", "NativeInterfaces", $"Unknown.AutoGenerated.cs");
                var destinationFileDirectory = Path.GetDirectoryName(destinationFilePath);
                if (destinationFileDirectory is not null)
                {
                    _ = Directory.CreateDirectory(destinationFileDirectory);
                    if (File.Exists(destinationFilePath))
                        File.SetAttributes(destinationFilePath, File.GetAttributes(destinationFilePath) & ~FileAttributes.ReadOnly);
                    using var nativeInterfaceCsWriter = new StreamWriter(destinationFilePath);
                    nativeInterfaceCsWriter.WriteLine("// This file is automatically generated. Do not rewrite manually.");
                    nativeInterfaceCsWriter.WriteLine();
                    nativeInterfaceCsWriter.WriteLine("using System;");
                    nativeInterfaceCsWriter.WriteLine("using System.Linq;");
                    nativeInterfaceCsWriter.WriteLine("using System.Runtime.InteropServices;");
                    nativeInterfaceCsWriter.WriteLine();
                    nativeInterfaceCsWriter.WriteLine($"namespace SevenZip.Compression.NativeInterfaces");
                    nativeInterfaceCsWriter.WriteLine("{");
                    var unknownInterfaceId = sevenZipInterfacesModel.Interfaces.Single(sevenZipInterface => sevenZipInterface.InterfaceName == "IUnknown").InterfaceId;
                    nativeInterfaceCsWriter.WriteLine($"    [Guid(\"{unknownInterfaceId}\")]");
                    nativeInterfaceCsWriter.WriteLine($"    partial class Unknown");
                    nativeInterfaceCsWriter.WriteLine("    {");
                    nativeInterfaceCsWriter.WriteLine("        private static readonly (Guid iid, Func<IntPtr, Unknown> instanceCreator)[] _instanceCreators = new []");
                    nativeInterfaceCsWriter.WriteLine("            {");
                    foreach (var sevenZipInterface in sevenZipInterfacesModel.Interfaces)
                    {
                        if (sevenZipInterface.Implemented && sevenZipInterface.ProvidedOutward && sevenZipInterface.CanQuery && sevenZipInterface.InterfaceName != "IUnknown" && sevenZipInterface.InterfaceName != "ICompressCodecsInfo")
                        {
                            var className = sevenZipInterface.InterfaceName[1..];
                            nativeInterfaceCsWriter.WriteLine($"                (iid: new Guid(\"{sevenZipInterface.InterfaceId}\"), instanceCreator: (Func<IntPtr, Unknown>)(nativeInterfaceObject => {className}.Create(nativeInterfaceObject))),");
                        }
                    }

                    nativeInterfaceCsWriter.WriteLine("            }");
                    nativeInterfaceCsWriter.WriteLine("            .OrderBy(item => item.iid)");
                    nativeInterfaceCsWriter.WriteLine("            .ToArray();");
                    nativeInterfaceCsWriter.WriteLine("    }");
                    nativeInterfaceCsWriter.WriteLine("}");

                    //File.SetLastWriteTimeUtc(destinationFilePath, sourceDatabaseTimeStamp);
                    File.SetAttributes(destinationFilePath, File.GetAttributes(destinationFilePath) | FileAttributes.ReadOnly);
                }
            }
        }

        private static void CopyVersionResource(String solutionPath)
        {
            var encoding = Encoding.GetEncoding("shift_jis");
            var fileVersionPattern = GetFileVersionPattern();
            var productVersionPattern = GetProductVersionPattern();
            var companyNamePattern = GetCompanyNamePattern();
            var descriptionPattern = GetDescriptionPattern();
            var fileVersionTextPattern = GetFileVersionTextPattern();
            var internalNamePattern = GetInternalNamePattern();
            var copyrightPattern = GetCopyrightPattern();
            var originalFileNamePattern = GetOriginalFileNamePattern();
            var productNamePattern = GetProductNamePattern();
            var productVersionTextPattern = GetProductVersionTextPattern();
            var sourceResourceFilePath = Path.Combine(solutionPath, _nativeCodeProjectName, "Palmtree.SevenZip.Compression.Wrapper.NET.Native.rc");
            var sourceFileText = File.ReadAllText(sourceResourceFilePath, encoding);
            var fileVersion = GetVersionResourceItem(sourceFileText, fileVersionPattern, sourceResourceFilePath);
            var productVersion = GetVersionResourceItem(sourceFileText, productVersionPattern, sourceResourceFilePath);
            var companyName = GetVersionResourceItem(sourceFileText, companyNamePattern, sourceResourceFilePath);
            var description = GetVersionResourceItem(sourceFileText, descriptionPattern, sourceResourceFilePath);
            var fileVersionText = GetVersionResourceItem(sourceFileText, fileVersionTextPattern, sourceResourceFilePath);
            var internalName = GetVersionResourceItem(sourceFileText, internalNamePattern, sourceResourceFilePath);
            var copyright = GetVersionResourceItem(sourceFileText, copyrightPattern, sourceResourceFilePath);
            var originalFileName = GetVersionResourceItem(sourceFileText, originalFileNamePattern, sourceResourceFilePath);
            var productName = GetVersionResourceItem(sourceFileText, productNamePattern, sourceResourceFilePath);
            var productVersionText = GetVersionResourceItem(sourceFileText, productVersionTextPattern, sourceResourceFilePath);
            foreach (var (os, architecture, osDisplayName, architectureDisplayName) in new[]
            {
                (os: "win", architecture: "x86", osDisplayName: "Windows", archtectureDisplayName:"x86"),
                (os: "win", architecture: "x64", osDisplayName: "Windows", archtectureDisplayName:"x64"),
                (os: "win", architecture: "arm32", osDisplayName: "Windows", archtectureDisplayName:"ARM"),
                (os: "win", architecture: "arm64", osDisplayName: "Windows", archtectureDisplayName:"ARM64"),
            })
            {
                String ExpandMacro(String text)
                {
                    text = text.Replace("${os}", os);
                    text = text.Replace("${architecture}", architecture);
                    text = text.Replace("${osDisplayName}", osDisplayName);
                    text = text.Replace("${architectureDisplayName}", architectureDisplayName);
                    if (text.Contains("${", StringComparison.Ordinal))
                        throw new Exception();
                    return text;
                }

                var destinationDirectoryPath = Path.Combine(solutionPath, $"Palmtree.SevenZip.Compression.Wrapper.NET.Native.{os}_{architecture}");
                if (Directory.Exists(destinationDirectoryPath))
                {
                    var destinationResourceFilePath = Path.Combine(destinationDirectoryPath, $"Palmtree.SevenZip.Compression.Wrapper.NET.Native.{os}_{architecture}.rc");
                    if (File.Exists(destinationResourceFilePath))
                        File.SetAttributes(destinationResourceFilePath, File.GetAttributes(destinationResourceFilePath) & ~FileAttributes.ReadOnly);
                    var destinationFileText = File.ReadAllText(destinationResourceFilePath, encoding);
                    destinationFileText = SetVersionResourceItem(destinationFileText, fileVersionPattern, $"FILEVERSION {ExpandMacro(fileVersion)}", destinationResourceFilePath);
                    destinationFileText = SetVersionResourceItem(destinationFileText, productVersionPattern, $"PRODUCTVERSION {ExpandMacro(productVersion)}", destinationResourceFilePath);
                    destinationFileText = SetVersionResourceItem(destinationFileText, companyNamePattern, $"VALUE \"CompanyName\", \"{ExpandMacro(companyName)}\"", destinationResourceFilePath);
                    destinationFileText = SetVersionResourceItem(destinationFileText, descriptionPattern, $"VALUE \"FileDescription\", \"{ExpandMacro(description)}\"", destinationResourceFilePath);
                    destinationFileText = SetVersionResourceItem(destinationFileText, fileVersionTextPattern, $"VALUE \"FileVersion\", \"{ExpandMacro(fileVersionText)}\"", destinationResourceFilePath);
                    destinationFileText = SetVersionResourceItem(destinationFileText, internalNamePattern, $"VALUE \"InternalName\", \"{ExpandMacro(internalName)}\"", destinationResourceFilePath);
                    destinationFileText = SetVersionResourceItem(destinationFileText, copyrightPattern, $"VALUE \"LegalCopyright\", \"{ExpandMacro(copyright)}\"", destinationResourceFilePath);
                    destinationFileText = SetVersionResourceItem(destinationFileText, originalFileNamePattern, $"VALUE \"OriginalFilename\", \"{ExpandMacro(originalFileName)}\"", destinationResourceFilePath);
                    destinationFileText = SetVersionResourceItem(destinationFileText, productNamePattern, $"VALUE \"ProductName\", \"{ExpandMacro(productName)}\"", destinationResourceFilePath);
                    destinationFileText = SetVersionResourceItem(destinationFileText, productVersionTextPattern, $"VALUE \"ProductVersion\", \"{ExpandMacro(productVersionText)}\"", destinationResourceFilePath);
                    if (destinationFileText.Contains("${", StringComparison.Ordinal))
                        throw new Exception();
                    File.WriteAllText(destinationResourceFilePath, destinationFileText, encoding);
                    //File.SetLastWriteTimeUtc(destinationResourceFilePath, sourceResourceTileTimeStamp);
                    File.SetAttributes(destinationResourceFilePath, File.GetAttributes(destinationResourceFilePath) | FileAttributes.ReadOnly);

                    var sourceResourceIncludeFilePath = Path.Combine(solutionPath, _nativeCodeProjectName, "resource.h");
                    var sourceIncludeFileText = File.ReadAllText(sourceResourceIncludeFilePath, encoding);
                    var destinationIncludeFileText = ExpandMacro(sourceIncludeFileText);
                    var destinationResourceIncludeFilePath = Path.Combine(destinationDirectoryPath, "resource.h");
                    File.WriteAllText(destinationResourceIncludeFilePath, destinationIncludeFileText);
                    if (File.Exists(destinationResourceIncludeFilePath))
                        File.SetAttributes(destinationResourceIncludeFilePath, File.GetAttributes(destinationResourceIncludeFilePath) & ~FileAttributes.ReadOnly);
                }
            }
        }

        private static String GetVersionResourceItem(String versionResourceText, Regex versionPattern, String versionResourceFilePath)
        {
            var matchFileVersion = versionPattern.Match(versionResourceText);
            if (!matchFileVersion.Success)
                throw new ApplicationException($"Some items are missing in the version resource. : pattern=\"{versionPattern}\", path=\"{versionResourceFilePath}\"");
            return matchFileVersion.Groups["value"].Value;
        }

        private static String SetVersionResourceItem(String versionResourceText, Regex versionPattern, String newVersionResourceItem, String versionResourceFilePath)
        {
            var matchFileVersion = versionPattern.Match(versionResourceText);
            if (!matchFileVersion.Success)
                throw new ApplicationException($"Some items are missing in the version resource. : pattern=\"{versionPattern}\", path=\"{versionResourceFilePath}\"");
            return versionResourceText.Replace(matchFileVersion.Value, newVersionResourceItem);
        }

        private static void RenderInterfaceCreatorFinder32(TextWriter writer, String indent, (String name, UInt32[] keys, Guid guid)[] source, Int32 keyIndex, Int32 lowerBound, Int32 upperBound, Boolean isRoot, Action<TextWriter, Boolean, String, String?> creatorWriter)
        {
            if (keyIndex >= 4)
            {
                if (upperBound - lowerBound != 1)
                    throw new Exception();
                creatorWriter(writer, isRoot, indent, source[lowerBound].name);
            }
            else if (upperBound - lowerBound <= 0)
            {
                throw new Exception();
            }
            else
            {
                var keys = source.Skip(lowerBound).Take(upperBound - lowerBound).Select(item => item.keys[keyIndex]).Distinct().OrderBy(key => key).ToArray();
                if (keys.Length <= 1)
                {
                    if (!isRoot)
                        writer.WriteLine($"{indent[4..]}{{");
                    writer.WriteLine($"{indent}if (guid{keyIndex} != 0x{source[lowerBound].keys[keyIndex]:x8})");
                    creatorWriter(writer, isRoot, indent, null);
                    RenderInterfaceCreatorFinder32(writer, indent, source, keyIndex + 1, lowerBound, upperBound, isRoot, creatorWriter);
                    if (!isRoot)
                        writer.WriteLine($"{indent[4..]}}}");
                }
                else if (keys.Length == 2)
                {
                    var part1Length = source.Skip(lowerBound).Take(upperBound - lowerBound).Where(item => item.keys[keyIndex] == keys[0]).Count();
                    var part2Length = source.Skip(lowerBound).Take(upperBound - lowerBound).Where(item => item.keys[keyIndex] == keys[1]).Count();
                    if (part1Length + part2Length != upperBound - lowerBound)
                        throw new Exception();
                    if (!isRoot)
                        writer.WriteLine($"{indent[4..]}{{");
                    writer.WriteLine($"{indent}if (guid{keyIndex} == 0x{keys[0]:x8})");
                    RenderInterfaceCreatorFinder32(writer, indent + "    ", source, keyIndex + 1, lowerBound, lowerBound + part1Length, false, creatorWriter);
                    writer.WriteLine($"{indent}else if (guid{keyIndex} == 0x{keys[1]:x8})");
                    RenderInterfaceCreatorFinder32(writer, indent + "    ", source, keyIndex + 1, lowerBound + part1Length, upperBound, false, creatorWriter);
                    writer.WriteLine($"{indent}else");
                    creatorWriter(writer, isRoot, indent, null);
                    if (!isRoot)
                        writer.WriteLine($"{indent[4..]}}}");
                }
                else
                {
                    var mediumKey = keys[keys.Length / 2];
                    var part1Length = source.Skip(lowerBound).Take(upperBound - lowerBound).Where(item => item.keys[keyIndex] < mediumKey).Count();
                    var part2Length = source.Skip(lowerBound).Take(upperBound - lowerBound).Where(item => item.keys[keyIndex] >= mediumKey).Count();
                    if (part1Length + part2Length != upperBound - lowerBound)
                        throw new Exception();
                    if (!isRoot)
                        writer.WriteLine($"{indent[4..]}{{");
                    writer.WriteLine($"{indent}if (guid{keyIndex} < 0x{mediumKey:x8})");
                    RenderInterfaceCreatorFinder32(writer, indent + "    ", source, keyIndex, lowerBound, lowerBound + part1Length, false, creatorWriter);
                    writer.WriteLine($"{indent}else");
                    RenderInterfaceCreatorFinder32(writer, indent + "    ", source, keyIndex, lowerBound + part1Length, upperBound, false, creatorWriter);
                    if (!isRoot)
                        writer.WriteLine($"{indent[4..]}}}");
                }
            }
        }

        private static void RenderInterfaceCreatorFinder64(TextWriter writer, String indent, (String name, UInt64[] keys, Guid guid)[] source, Int32 keyIndex, Int32 lowerBound, Int32 upperBound, Boolean isRoot, Action<TextWriter, Boolean, String, String?> creatorWriter)
        {
            if (keyIndex >= 2)
            {
                if (upperBound - lowerBound != 1)
                    throw new Exception();
                creatorWriter(writer, isRoot, indent, source[lowerBound].name);
            }
            else if (upperBound - lowerBound <= 0)
            {
                throw new Exception();
            }
            else
            {
                var keys = source.Skip(lowerBound).Take(upperBound - lowerBound).Select(item => item.keys[keyIndex]).Distinct().OrderBy(key => key).ToArray();
                if (keys.Length <= 1)
                {
                    if (!isRoot)
                        writer.WriteLine($"{indent[4..]}{{");
                    writer.WriteLine($"{indent}if (guid{keyIndex} != 0x{source[lowerBound].keys[keyIndex]:x8})");
                    creatorWriter(writer, isRoot, indent, null);
                    RenderInterfaceCreatorFinder64(writer, indent, source, keyIndex + 1, lowerBound, upperBound, isRoot, creatorWriter);
                    if (!isRoot)
                        writer.WriteLine($"{indent[4..]}}}");
                }
                else if (keys.Length == 2)
                {
                    var part1Length = source.Skip(lowerBound).Take(upperBound - lowerBound).Where(item => item.keys[keyIndex] == keys[0]).Count();
                    var part2Length = source.Skip(lowerBound).Take(upperBound - lowerBound).Where(item => item.keys[keyIndex] == keys[1]).Count();
                    if (part1Length + part2Length != upperBound - lowerBound)
                        throw new Exception();
                    if (!isRoot)
                        writer.WriteLine($"{indent[4..]}{{");
                    writer.WriteLine($"{indent}if (guid{keyIndex} == 0x{keys[0]:x8})");
                    RenderInterfaceCreatorFinder64(writer, indent + "    ", source, keyIndex + 1, lowerBound, lowerBound + part1Length, false, creatorWriter);
                    writer.WriteLine($"{indent}else if (guid{keyIndex} == 0x{keys[1]:x8})");
                    RenderInterfaceCreatorFinder64(writer, indent + "    ", source, keyIndex + 1, lowerBound + part1Length, upperBound, false, creatorWriter);
                    writer.WriteLine($"{indent}else");
                    creatorWriter(writer, isRoot, indent, null);
                    if (!isRoot)
                        writer.WriteLine($"{indent[4..]}}}");
                }
                else
                {
                    var mediumKey = keys[keys.Length / 2];
                    var part1Length = source.Skip(lowerBound).Take(upperBound - lowerBound).Where(item => item.keys[keyIndex] < mediumKey).Count();
                    var part2Length = source.Skip(lowerBound).Take(upperBound - lowerBound).Where(item => item.keys[keyIndex] >= mediumKey).Count();
                    if (part1Length + part2Length != upperBound - lowerBound)
                        throw new Exception();
                    if (!isRoot)
                        writer.WriteLine($"{indent[4..]}{{");
                    writer.WriteLine($"{indent}if (guid{keyIndex} < 0x{mediumKey:x8})");
                    RenderInterfaceCreatorFinder64(writer, indent + "    ", source, keyIndex, lowerBound, lowerBound + part1Length, false, creatorWriter);
                    writer.WriteLine($"{indent}else");
                    RenderInterfaceCreatorFinder64(writer, indent + "    ", source, keyIndex, lowerBound + part1Length, upperBound, false, creatorWriter);
                    if (!isRoot)
                        writer.WriteLine($"{indent[4..]}}}");
                }
            }
        }

        private static Boolean IsCSharpSafeType(String unmanagedType)
            => unmanagedType switch
            {
                "Int16" or "UInt16" or "Int32" or "UInt32" or "Int64" or "UInt64" or "MethodPropID" or "ModulePropID" or "NativeInStreamReader" or "NativeOutStreamWriter" or "NativeProgressReporter" or "NativeProgressReporter?" or "IntPtr" or "ref NativeGUID" or "ref PROPVARIANT" or "out UInt32" or "out UInt64" or "out IntPtr" => true,
                "void*" or "Byte*" or "UInt32*" or "UInt64*" or "CoderPropertyId*" or "PROPVARIANT*" or "NativeInStreamReader*" or "NativeOutStreamWriter*" or "void**" or "UInt64**" => false,
                _ => throw new ApplicationException($"Unhandled type: {unmanagedType}"),
            };

        private static String MapTypeFromUnmanageToManage(String unmanagedType)
        {
            switch (unmanagedType)
            {
                case "void":
                case "Int32":
                case "UInt32":
                case "Int64":
                case "UInt64":
                case "CoderPropertyId":
                case "MethodPropID":
                case "ModulePropID":
                case "HRESULT":
                case "NativeInStreamReader":
                case "NativeOutStreamWriter":
                case "NativeProgressReporter":
                case "NativeProgressReporter?":
                case "IntPtr":
                case "void*":
                case "Byte*":
                case "UInt32*":
                case "UInt64*":
                case "CoderPropertyId*":
                case "MethodPropID*":
                case "PROPVARIANT*":
                case "NativeInStreamReader*":
                case "NativeOutStreamWriter*":
                case "void**":
                case "UInt64**":
                case "ref NativeGUID":
                case "ref PROPVARIANT":
                case "out UInt32":
                case "out UInt64":
                case "out IntPtr":
                    return unmanagedType;

                default:
                {
                    var match = GetPointerToVoidPattern().Match(unmanagedType);
                    if (match.Success)
                        return "void*";
                }

                {
                    var match = GetPointerToPointerToVoidPattern().Match(unmanagedType);
                    if (match.Success)
                        return "void**";
                }

                throw new ApplicationException($"Unhandled type: {unmanagedType}");
            }
        }

        [GeneratedRegex(@"FILEVERSION[ \t]+(?<value>[0-9\*\.]+)", RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]
        private static partial Regex GetFileVersionPattern();

        [GeneratedRegex(@"PRODUCTVERSION[ \t]+(?<value>[0-9\*\.]+)", RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]
        private static partial Regex GetProductVersionPattern();

        [GeneratedRegex(@"VALUE[ \t]+""CompanyName""[ \t]*,[ \t]*""(?<value>[^""]+)""", RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]
        private static partial Regex GetCompanyNamePattern();

        [GeneratedRegex(@"VALUE[ \t]+""FileDescription""[ \t]*,[ \t]*""(?<value>[^""]+)""", RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]
        private static partial Regex GetDescriptionPattern();

        [GeneratedRegex(@"VALUE[ \t]+""FileVersion""[ \t]*,[ \t]*""(?<value>[^""]+)""", RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]
        private static partial Regex GetFileVersionTextPattern();

        [GeneratedRegex(@"VALUE[ \t]+""InternalName""[ \t]*,[ \t]*""(?<value>[^""]+)""", RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]
        private static partial Regex GetInternalNamePattern();

        [GeneratedRegex(@"VALUE[ \t]+""LegalCopyright""[ \t]*,[ \t]*""(?<value>[^""]+)""", RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]
        private static partial Regex GetCopyrightPattern();

        [GeneratedRegex(@"VALUE[ \t]+""OriginalFilename""[ \t]*,[ \t]*""(?<value>[^""]+)""", RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]
        private static partial Regex GetOriginalFileNamePattern();

        [GeneratedRegex(@"VALUE[ \t]+""ProductName""[ \t]*,[ \t]*""(?<value>[^""]+)""", RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]
        private static partial Regex GetProductNamePattern();

        [GeneratedRegex(@"VALUE[ \t]+""ProductVersion""[ \t]*,[ \t]*""(?<value>[^""]+)""", RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]
        private static partial Regex GetProductVersionTextPattern();

        [GeneratedRegex(@"^I[A-Za-z0-9]+\*$", RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]
        private static partial Regex GetPointerToVoidPattern();

        [GeneratedRegex(@"^I[A-Za-z0-9]+\*\*$", RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]
        private static partial Regex GetPointerToPointerToVoidPattern();
    }
}
