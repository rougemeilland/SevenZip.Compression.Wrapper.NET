// This file is automatically generated. Do not rewrite manually.

#include "SevenZipInterface.h"

extern "C" const GUID IID_ISequentialInStream = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00 } };
extern "C" const GUID IID_ISequentialOutStream = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00 } };
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_IInStream = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_IOutStream = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_IStreamGetSize = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_IOutStreamFinish = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_IStreamGetProps = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x03, 0x00, 0x08, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_IStreamGetProps2 = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x03, 0x00, 0x09, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICompressProgressInfo = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00 } };
extern "C" const GUID IID_ICompressCoder = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x05, 0x00, 0x00 } };
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICompressCoder2 = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICompressSetCoderPropertiesOpt = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x1f, 0x00, 0x00 } };
extern "C" const GUID IID_ICompressSetCoderProperties = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00 } };
extern "C" const GUID IID_ICompressSetDecoderProperties2 = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x22, 0x00, 0x00 } };
extern "C" const GUID IID_ICompressWriteCoderProperties = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x23, 0x00, 0x00 } };
extern "C" const GUID IID_ICompressGetInStreamProcessedSize = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x24, 0x00, 0x00 } };
extern "C" const GUID IID_ICompressSetCoderMt = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x25, 0x00, 0x00 } };
extern "C" const GUID IID_ICompressSetFinishMode = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x26, 0x00, 0x00 } };
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICompressGetInStreamProcessedSize2 = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x27, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICompressSetMemLimit = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x28, 0x00, 0x00 } };
extern "C" const GUID IID_ICompressReadUnusedFromInBuf = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x29, 0x00, 0x00 } };
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICompressGetSubStreamSize = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICompressSetInStream = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x31, 0x00, 0x00 } };
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICompressSetOutStream = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICompressSetOutStreamSize = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00 } };
extern "C" const GUID IID_ICompressSetBufSize = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x35, 0x00, 0x00 } };
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICompressInitEncoder = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x36, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICompressSetInStream2 = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICompressFilter = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICompressCodecsInfo = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00 } };
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_ISetCompressCodecsInfo = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x61, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICryptoProperties = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x80, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICryptoResetInitVector = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x8c, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICryptoSetPassword = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x90, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_ICryptoSetCRC = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0xa0, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_IHasher = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0xc0, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
extern "C" const GUID IID_IHashers = { 0x23170f69, 0x40c1, 0x278a, { 0x00, 0x00, 0x00, 0x04, 0x00, 0xc1, 0x00, 0x00 } };
#endif // This interface is not supported by the wrapper.

extern "C"
{
    __DEFINE_PUBLIC_FUNC(HRESULT, IUnknown, QueryInterface)(IUnknown* ifp, GUID* piid, void** ppvObject)
    {
        return Customized_IUnknown__QueryInterface(ifp, piid, ppvObject);
    }

    __DEFINE_PUBLIC_FUNC(UInt32, IUnknown, AddRef)(IUnknown* ifp)
    {
        return ifp->AddRef();
    }

    __DEFINE_PUBLIC_FUNC(UInt32, IUnknown, Release)(IUnknown* ifp)
    {
        return ifp->Release();
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ISequentialInStream, Read)(ISequentialInStream* ifp, void* data, UInt32 size, UInt32* processedSize)
    {
        return ifp->Read(data, size, processedSize);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ISequentialOutStream, Write)(ISequentialOutStream* ifp, const void* data, UInt32 size, UInt32* processedSize)
    {
        return ifp->Write(data, size, processedSize);
    }

#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, IInStream, Seek)(IInStream* ifp, Int64 offset, UInt32 seekOrigin, UInt64* newPosition)
    {
        return ifp->Seek(offset, seekOrigin, newPosition);
    }

#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, IOutStream, Seek)(IOutStream* ifp, Int64 offset, UInt32 seekOrigin, UInt64* newPosition)
    {
        return ifp->Seek(offset, seekOrigin, newPosition);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, IOutStream, SetSize)(IOutStream* ifp, UInt64 newSize)
    {
        return ifp->SetSize(newSize);
    }

#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, IStreamGetSize, GetSize)(IStreamGetSize* ifp, UInt64* size)
    {
        return ifp->GetSize(size);
    }

#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, IOutStreamFinish, OutStreamFinish)(IOutStreamFinish* ifp)
    {
        return ifp->OutStreamFinish();
    }

#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, IStreamGetProps, GetProps)(IStreamGetProps* ifp, UInt64* size, FILETIME* cTime, FILETIME* aTime, FILETIME* mTime, UInt32* attrib)
    {
        return ifp->GetProps(size, cTime, aTime, mTime, attrib);
    }

#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, IStreamGetProps2, GetProps2)(IStreamGetProps2* ifp, CStreamFileProps* props)
    {
        return ifp->GetProps2(props);
    }

#endif // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressProgressInfo, SetRatioInfo)(ICompressProgressInfo* ifp, const UInt64* inSize, const UInt64* outSize)
    {
        return ifp->SetRatioInfo(inSize, outSize);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressCoder, Code)(ICompressCoder* ifp, SequentialInStreamReader inStreamReader, SequentialOutStreamWriter outStreamWriter, const UInt64* inSize, const UInt64* outSize, CompressProgressInfoReporter progressReporter)
    {
        return Customized_ICompressCoder__Code(ifp, inStreamReader, outStreamWriter, inSize, outSize, progressReporter);
    }

#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressCoder2, Code)(ICompressCoder2* ifp, SequentialInStreamReader const* inStreamReaders, const UInt64* const* inSizes, UInt32 numInStreams, SequentialOutStreamWriter const* outStreamWriters, const UInt64* const* outSizes, UInt32 numOutStreams, CompressProgressInfoReporter progressReporter)
    {
        return Customized_ICompressCoder2__Code(ifp, inStreamReaders, inSizes, numInStreams, outStreamWriters, outSizes, numOutStreams, progressReporter);
    }

#endif // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressSetCoderPropertiesOpt, SetCoderPropertiesOpt)(ICompressSetCoderPropertiesOpt* ifp, const PROPID* propIDs, const PROPVARIANT* props, UInt32 numProps)
    {
        return ifp->SetCoderPropertiesOpt(propIDs, props, numProps);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressSetCoderProperties, SetCoderProperties)(ICompressSetCoderProperties* ifp, const PROPID* propIDs, const PROPVARIANT* props, UInt32 numProps)
    {
        return ifp->SetCoderProperties(propIDs, props, numProps);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressSetDecoderProperties2, SetDecoderProperties2)(ICompressSetDecoderProperties2* ifp, const Byte* data, UInt32 size)
    {
        return ifp->SetDecoderProperties2(data, size);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressWriteCoderProperties, WriteCoderProperties)(ICompressWriteCoderProperties* ifp, SequentialOutStreamWriter outStreamWriter)
    {
        return Customized_ICompressWriteCoderProperties__WriteCoderProperties(ifp, outStreamWriter);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressGetInStreamProcessedSize, GetInStreamProcessedSize)(ICompressGetInStreamProcessedSize* ifp, UInt64* value)
    {
        return ifp->GetInStreamProcessedSize(value);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressSetCoderMt, SetNumberOfThreads)(ICompressSetCoderMt* ifp, UInt32 numThreads)
    {
        return ifp->SetNumberOfThreads(numThreads);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressSetFinishMode, SetFinishMode)(ICompressSetFinishMode* ifp, UInt32 finishMode)
    {
        return ifp->SetFinishMode(finishMode);
    }

#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressGetInStreamProcessedSize2, GetInStreamProcessedSize2)(ICompressGetInStreamProcessedSize2* ifp, UInt32 streamIndex, UInt64* value)
    {
        return ifp->GetInStreamProcessedSize2(streamIndex, value);
    }

#endif // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressSetMemLimit, SetMemLimit)(ICompressSetMemLimit* ifp, UInt64 memUsage)
    {
        return ifp->SetMemLimit(memUsage);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressReadUnusedFromInBuf, ReadUnusedFromInBuf)(ICompressReadUnusedFromInBuf* ifp, void* data, UInt32 size, UInt32* processedSize)
    {
        return ifp->ReadUnusedFromInBuf(data, size, processedSize);
    }

#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressGetSubStreamSize, GetSubStreamSize)(ICompressGetSubStreamSize* ifp, UInt64 subStream, UInt64* value)
    {
        return ifp->GetSubStreamSize(subStream, value);
    }

#endif // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressSetInStream, SetInStream)(ICompressSetInStream* ifp, SequentialInStreamReader inStreamReader)
    {
        return Customized_ICompressSetInStream__SetInStream(ifp, inStreamReader);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressSetInStream, ReleaseInStream)(ICompressSetInStream* ifp)
    {
        return ifp->ReleaseInStream();
    }

#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressSetOutStream, SetOutStream)(ICompressSetOutStream* ifp, SequentialOutStreamWriter outStreamWriter)
    {
        return Customized_ICompressSetOutStream__SetOutStream(ifp, outStreamWriter);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressSetOutStream, ReleaseOutStream)(ICompressSetOutStream* ifp)
    {
        return ifp->ReleaseOutStream();
    }

#endif // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressSetOutStreamSize, SetOutStreamSize)(ICompressSetOutStreamSize* ifp, const UInt64* outSize)
    {
        return ifp->SetOutStreamSize(outSize);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressSetBufSize, SetInBufSize)(ICompressSetBufSize* ifp, UInt32 streamIndex, UInt32 size)
    {
        return ifp->SetInBufSize(streamIndex, size);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressSetBufSize, SetOutBufSize)(ICompressSetBufSize* ifp, UInt32 streamIndex, UInt32 size)
    {
        return ifp->SetOutBufSize(streamIndex, size);
    }

#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressInitEncoder, InitEncoder)(ICompressInitEncoder* ifp)
    {
        return ifp->InitEncoder();
    }

#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressSetInStream2, SetInStream2)(ICompressSetInStream2* ifp, UInt32 streamIndex, SequentialInStreamReader inStreamReader)
    {
        return Customized_ICompressSetInStream2__SetInStream2(ifp, streamIndex, inStreamReader);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressSetInStream2, ReleaseInStream2)(ICompressSetInStream2* ifp, UInt32 streamIndex)
    {
        return ifp->ReleaseInStream2(streamIndex);
    }

#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressFilter, Init)(ICompressFilter* ifp)
    {
        return ifp->Init();
    }

    __DEFINE_PUBLIC_FUNC(UInt32, ICompressFilter, Filter)(ICompressFilter* ifp, Byte* data, UInt32 size)
    {
        return ifp->Filter(data, size);
    }

#endif // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressCodecsInfo, GetNumMethods)(ICompressCodecsInfo* ifp, UInt32* numMethods)
    {
        return ifp->GetNumMethods(numMethods);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressCodecsInfo, GetProperty)(ICompressCodecsInfo* ifp, UInt32 index, PROPID propID, PROPVARIANT* value)
    {
        return ifp->GetProperty(index, propID, value);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressCodecsInfo, CreateDecoder)(ICompressCodecsInfo* ifp, UInt32 index, const GUID* iid, void** coder)
    {
        return ifp->CreateDecoder(index, iid, coder);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICompressCodecsInfo, CreateEncoder)(ICompressCodecsInfo* ifp, UInt32 index, const GUID* iid, void** coder)
    {
        return ifp->CreateEncoder(index, iid, coder);
    }

#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ISetCompressCodecsInfo, SetCompressCodecsInfo)(ISetCompressCodecsInfo* ifp, ICompressCodecsInfo* compressCodecsInfo)
    {
        return ifp->SetCompressCodecsInfo(compressCodecsInfo);
    }

#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICryptoProperties, SetKey)(ICryptoProperties* ifp, const Byte* data, UInt32 size)
    {
        return ifp->SetKey(data, size);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, ICryptoProperties, SetInitVector)(ICryptoProperties* ifp, const Byte* data, UInt32 size)
    {
        return ifp->SetInitVector(data, size);
    }

#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICryptoResetInitVector, ResetInitVector)(ICryptoResetInitVector* ifp)
    {
        return ifp->ResetInitVector();
    }

#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICryptoSetPassword, CryptoSetPassword)(ICryptoSetPassword* ifp, const Byte* data, UInt32 size)
    {
        return ifp->CryptoSetPassword(data, size);
    }

#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(HRESULT, ICryptoSetCRC, CryptoSetCRC)(ICryptoSetCRC* ifp, UInt32 crc)
    {
        return ifp->CryptoSetCRC(crc);
    }

#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(void, IHasher, Init)(IHasher* ifp)
    {
        ifp->Init();
    }

    __DEFINE_PUBLIC_FUNC(void, IHasher, Update)(IHasher* ifp, const void* data, UInt32 size)
    {
        ifp->Update(data, size);
    }

    __DEFINE_PUBLIC_FUNC(void, IHasher, Final)(IHasher* ifp, Byte* digest)
    {
        ifp->Final(digest);
    }

    __DEFINE_PUBLIC_FUNC(UInt32, IHasher, GetDigestSize)(IHasher* ifp)
    {
        return ifp->GetDigestSize();
    }

#endif // This interface is not supported by the wrapper.
#if false // This interface is not supported by the wrapper.
    __DEFINE_PUBLIC_FUNC(UInt32, IHashers, GetNumHashers)(IHashers* ifp)
    {
        return ifp->GetNumHashers();
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, IHashers, GetHasherProp)(IHashers* ifp, UInt32 index, PROPID propID, PROPVARIANT* value)
    {
        return ifp->GetHasherProp(index, propID, value);
    }

    __DEFINE_PUBLIC_FUNC(HRESULT, IHashers, CreateHasher)(IHashers* ifp, UInt32 index, IHasher** hasher)
    {
        return ifp->CreateHasher(index, hasher);
    }

#endif // This interface is not supported by the wrapper.
}
