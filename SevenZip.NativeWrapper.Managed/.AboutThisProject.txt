このプロジェクトは、プラットフォームに依存するプラグインのソースファイルを保持するプロジェクトです。
このプロジェクトの存在目的はプラグインプロジェクトの共通ソースを格納することで、このプロジェクトで生成されたアセンブリは公開パッケージには含まれません。
このプロジェクトで格納されているソースファイルは他の各々のプラットフォームのためのプラグインプロジェクトからリンクで参照されます。

このプロジェクトでは、アンマネージコードを呼び出すための「プラットフォーム呼び出し(P/Invoke)」が行われています。

例：
[DllImport("SevenZip.NativeWrapper.Unmanaged", EntryPoint = "EXPORTED_IUnknown__QueryInterface")]
public static extern HRESULT IUnknown__QueryInterface(IntPtr ifp, ref NativeGUID piid, out IntPtr pvObject);

DllImport属性のアンマネージライブラリの名前の指定で、私は以下のドキュメントを参考にしてファイル名の拡張子を省略しました。

https://docs.microsoft.com/ja-jp/dotnet/standard/native-interop/cross-platform <クロス プラットフォーム P/Invoke コードの作成>

もし上記のリンクが切れている場合には、このプロジェクトの以下のドキュメントを参照してください。
"Writing cross platform PInvoke code.pdf"



This project holds the source files for platform-dependent plugins.
The purpose of this project is to store the common source of the plugin project, and the assemblies generated by this project will not be included in the public package.
The source files stored in this project are referenced by links from plugin projects for each of the other platforms.

In this project, a "Platform Invoke (P/Invoke)" is being made to call unmanaged code.

example:
[DllImport("SevenZip.NativeWrapper.Unmanaged", EntryPoint = "EXPORTED_IUnknown__QueryInterface")]
public static extern HRESULT IUnknown__QueryInterface(IntPtr ifp, ref NativeGUID piid, out IntPtr pvObject);


In specifying the name of the unmanaged library of the DllImport attribute, I omitted the file name extension by referring to the following document.

https://docs.microsoft.com/ja-jp/dotnet/standard/native-interop/cross-platform <Writing cross platform P/Invoke code>

If the above link is broken, please refer to the following documents for this project.
"Writing cross platform PInvoke code.pdf"




Platform Invoke (P/Invoke)

https://docs.microsoft.com/ja-jp/dotnet/standard/native-interop/cross-platform <Writing cross platform P/Invoke code>

"Writing cross platform PInvoke code.pdf"
