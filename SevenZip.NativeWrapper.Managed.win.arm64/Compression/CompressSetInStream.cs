// This file is automatically generated. Do not rewrite manually.

using SevenZip.NativeInterface.Compression;
using SevenZip.NativeInterface.IO;
using SevenZip.NativeWrapper.Managed.win.arm64.Platform;
using System;

namespace SevenZip.NativeWrapper.Managed.win.arm64.Compression
{
    class CompressSetInStream
        : Unknown, ICompressSetInStream
    {
        private NativeInStreamReader? _nativeReader;

        protected CompressSetInStream(IntPtr nativeInterfaceObject)
            : base(nativeInterfaceObject)
        {
            _nativeReader = null;
        }

        public static ICompressSetInStream Create(IntPtr nativeInterfaceObject)
        {
            if (nativeInterfaceObject == IntPtr.Zero)
                throw new ArgumentNullException(nameof(nativeInterfaceObject));

            return new CompressSetInStream(nativeInterfaceObject);
        }

        void ICompressSetInStream.ReleaseInStream()
        {
            ReleaseInStream();
        }

        void ICompressSetInStream.SetInStream(SequentialInStreamReader sequentialInStreamReader)
        {
            if (sequentialInStreamReader is null)
                throw new ArgumentNullException(nameof(sequentialInStreamReader));

            var success = false;
            try
            {
                try
                {
                    ReleaseInStream();
                }
                catch (Exception)
                {
                }

                // To prevent the delegate from being released at an unintended timing by the garbage collector, associate the delegate with the class field.
                _nativeReader = sequentialInStreamReader.ToNativeDelegate();

                var result = UnmanagedEntryPoint.ICompressSetInStream__SetInStream(NativeInterfaceObject, _nativeReader);
                if (result != HRESULT.S_OK)
                    throw result.GetExceptionFromHRESULT();
                success = true;
            }
            finally
            {
                if (!success)
                    _nativeReader = null;
            }
        }

        private void ReleaseInStream()
        {
            if (_nativeReader is not null)
            {
                try
                {
                    var result = UnmanagedEntryPoint.ICompressSetInStream__ReleaseInStream(NativeInterfaceObject);
                    if (result != HRESULT.S_OK)
                        throw result.GetExceptionFromHRESULT();
                }
                finally
                {
                    _nativeReader = null;
                }
            }
        }
    }
}
