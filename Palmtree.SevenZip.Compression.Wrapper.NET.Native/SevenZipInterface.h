#pragma once

#include "Platform.h"

struct IHasher;

#if defined(_ARCHITECTURE_NATIVE_ADDRESS_32_BIT)
typedef UInt32(STDMETHODCALLTYPE* Func_IsArc)(const Byte* p, UInt32 size);
#elif defined(_ARCHITECTURE_NATIVE_ADDRESS_64_BIT)
typedef UInt32(STDMETHODCALLTYPE* Func_IsArc)(const Byte* p, UInt64 size);
#else
#endif
typedef UInt64 CMethodId;

enum CoderPropID
{
    kDefaultProp = 0,
    kDictionarySize,
    kUsedMemorySize,
    kOrder,
    kBlockSize,
    kPosStateBits,
    kLitContextBits,
    kLitPosBits,
    kNumFastBytes,
    kMatchFinder,
    kMatchFinderCycles,
    kNumPasses,
    kAlgorithm,
    kNumThreads,
    kEndMarker,
    kLevel,
    kReduceSize,
    kExpectedDataSize,
    kBlockSize2,
    kCheckSize,
    kFilter,
    kMemUse,
    kAffinity
};

enum MethodPropID
{
    kID,
    kName,
    kDecoder,
    kEncoder,
    kPackStreams,
    kUnpackStreams,
    kDescription,
    kDecoderIsAssigned,
    kEncoderIsAssigned,
    kDigestSize
};

struct CHasherInfo
{
    IHasher* (*CreateHasher)();
    CMethodId Id;
    const char* Name;
    UInt32 DigestSize;
};

struct CStreamFileProps
{
    UInt64 Size;
    UInt64 VolID;
    UInt64 FileID_Low;
    UInt64 FileID_High;
    UInt32 NumLinks;
    UInt32 Attrib;
    FILETIME CTime;
    FILETIME ATime;
    FILETIME MTime;
};

typedef HRESULT(STDMETHODCALLTYPE* SequentialInStreamReader)(void* buffer, UInt32 size, UInt32* processedSize);
typedef HRESULT(STDMETHODCALLTYPE* SequentialOutStreamWriter)(const void* buffer, UInt32 size, UInt32* processedSize);
typedef void(STDMETHODCALLTYPE* CompressProgressInfoReporter)(const UInt64* inSize, const UInt64* outSize);

#include "SevenZipInterface_AutoGenerated.h"
